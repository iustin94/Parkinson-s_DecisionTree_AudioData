# Date: 06.052018
# Data set source :
# au
#
# Data set consists of a test file and a train file.
# Voice samples come from 20 PWP and 20 Healthy individuals.
# Each individual has 26 recorded voice samples of vouls, numbers, words and sentences.
#
# The following script attempts to train a classification tree to classify the
# test data into healty or pwp individuals.
required_packages <- c("rpart","tree", "rpart.plot")
for( p in required_packages ){
if( p %in% rownames(installed.packages()) == FALSE) {
install.packages(p)
print(paste("Installing ",p,"..."))
}
else{
print(paste("Package ",p," already installed" ))
}
library(p, character.only = TRUE)
}
setwd("/home/iustinian/Documents/Parkinson_Multiple_Sound_Recording_Data/")
source("functions.R")
#Lines for debugging, DELETE AFTER FINISH
test_data <-read.csv("data/test_data.txt",header = FALSE,sep = ",")
train_data <- read.csv("data/train_data.txt", header = FALSE,sep = ",")
train_df <- preprocess_data(train_data, c_names_train)
test_df <- preprocess_data(test_data, c_names_test)
remove(test_data)
remove(train_data)
#Classification tree with Gini split
classification_tree_gini<- tree(Class~., train_df[,c(-1,-28)], split ="gini")
best_prune <- find_best_prune(classification_tree_gini, test_df)
classification_tree_gini<- prune.misclass(classification_tree_gini, best = best_prune)
classification_tree_gini<- prune.misclass(classification_tree_gini, best = best_prune[1])
View(classification_tree_gini)
summary(classification_tree_gini)
printcp(classification_tree_gini)
View(classification_tree_gini)
gini_split_classification <- predict(classification_tree_gini, test_df)
calculate_accuracy(gini_split_classification, test_df)
View(gini_split_classification)
prediction <- gini_split_classification
tmp_confusion_matrix <- table(test_df$Class, prediction)
View(prediction)
tmp_confusion_matrix <- table(test_df$Class, prediction$Positive)
tmp_confusion_matrix <- table(test_df$Class, prediction[,2] )
prediction[,2]
View(tmp_confusion_matrix)
View(train_df)
View(gini_split_classification)
View(classification_tree_gini)
View(train_df$UPDRS)
train_df <- DF[ , !(names(DF) %in% c("Subject_id", "UPDRS"))]
train_df <- train_df[ , !(names(train_df) %in% c("Subject_id", "UPDRS"))]
#Rpart
rpart(Class~., data= train_df, method = "class")
#Rpart
tree<- rpart(Class~., data= train_df, method = "class")
View(tree)
printcp(tree)
plotcp(tree)
plot(tree)
text(tree)
plot(tree)
text(tree)
plot(tree)
plot(tree)
text(tree)
plotcp(tree)
summary(tree)
post(tree, file= "diagram", title = "Classiciation tree 1")
plot(tree, uniform = TRUE)
plot(tree, uniform = TRUE, main = "Unpruned classification tree")
text(tree, use.n = TRUE, all=TRUE)
text(tree, use.n = TRUE, all=TRUE, cex= 8)
plot(tree, uniform = TRUE, main = "Unpruned classification tree")
text(tree, use.n = TRUE, all=TRUE, cex= 8)
plot(tree, uniform = TRUE, main = "Unpruned classification tree")
text(tree, use.n = TRUE, all=TRUE, cex= 1)
plot(tree, uniform = TRUE, main = "Unpruned classification tree")
text(tree, use.n = TRUE, all=TRUE, cex= 2)
plot(tree, uniform = TRUE, main = "Unpruned classification tree")
text(tree, use.n = TRUE, all=TRUE, cex= 1)
text(tree, all=TRUE, cex= 1)
text(tree, use.n = TRUE, cex= 1)
plot(tree, uniform = TRUE, main = "Unpruned classification tree")
text(tree, use.n = TRUE, cex= 1)
gini_split_classification <- predict(classification_tree_gini, test_df, type = "class")
prediction <- predict(classification_tree_gini, test_df, type = "class")
calculate_accuracy(prediction, test_df)
plot(tree, uniform = TRUE, main = "Unpruned classification tree (Accuracy: 0.351)")
text(tree, use.n = TRUE, cex= 1)
printcp(fit)
printcp(tree)
plotcp(tree)
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
pfit<- prune(tree, cp=   tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"])
plot(pfit)
plot(pfit, uniform = TRUE, main = "Pruned classification tree")
text(tree, use.n = TRUE, cex= 1)
#Calculate accuracy
calculate_accuracy(predict(pfit, test_df, type="class"), tree
)
#Calculate accuracy
calculate_accuracy(predict(pfit, test_df, type="class"), tree)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
calculate_accuracy(prediction, tree)
prediction <- predict(tree, test_df, type = "class")
calculate_accuracy(prediction, tree)
calculate_accuracy <- function(prediction, test_df){
tmp_confusion_matrix <- table(test_df$Class, prediction[,2] )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
return(accuracy)
}
#Rpart
tree<- rpart(Class~., data= train_df, method = "class")
prediction <- predict(tree, test_df, type = "class")
calculate_accuracy(prediction, tree)
view(prediction)
View(prediction)
calculate_accuracy <- function(prediction, test_df){
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
return(accuracy)
}
calculate_accuracy(prediction, tree)
length(test_df$Class)
length(prediction)
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
calculate_accuracy(prediction, tree)
source("functions.R")
#Rpart
tree<- rpart(Class~., data= train_df, method = "class")
prediction <- predict(tree, test_df, type = "class")
calculate_accuracy(prediction, tree)
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"])
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Rpart
tree<- rpart(Class~., data= train_df, method = "class")
prediction <- predict(tree, test_df, type = "class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Rpart
tree<- rpart(Class~., data= train_df, method = "class")
prediction <- predict(tree, test_df, type = "class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"])
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"])
plotcp(tree)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= 14,"CP"])
prune?
prune()?
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= 14)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= 13)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= 12)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= 2)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
tmp_confusion_matrix <- table(test_df$Class, prediction )
prediction <- predict(tree, test_df, type = "class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= 2)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
View(tmp_confusion_matrix)
#Rpart
tree<- rpart(Class~., data= train_df, method = "class")
prediction <- predict(tree, test_df, type = "class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
tmp_confusion_matrix <- table(test_df$Class, prediction )
View(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= 16)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Rpart
tree<- rpart(Class~., data= train_df, method = "class")
prediction <- predict(tree, test_df, type = "class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
View(prediction)
View(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"])
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
prediction <- predict(tree, test_df, type = "class")
tmp_confusion_matrix <- table(test_df$Class, prediction)
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"])
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp = 5)
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
#Rpart
tree<- rpart(Class~., data= train_df, method = "class")
prediction <- predict(tree, test_df, type = "class")
tmp_confusion_matrix <- table(test_df$Class, prediction)
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
View(prediction)
View(tmp_confusion_matrix)
accuracy <- tmp_confusion_matrix[,Var1=Positive]
accuracy <- tmp_confusion_matrix[,Var1="Positive"]
View(accuracy)
accuracy <- tmp_confusion_matrix[1,"Freq"]
accuracy <- tmp_confusion_matrix[1,]
tmp_confusion_matrix[1,]
#Prune tree based on xerror given by the cross validation analysis
pfit<- prune(tree, cp= tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"])
#Calculate accuracy
prediction <- predict(pfit, test_df, type="class")
tmp_confusion_matrix <- table(test_df$Class, prediction )
accuracy <- sum(diag(tmp_confusion_matrix))/sum(tmp_confusion_matrix)
plotcp(tree)
